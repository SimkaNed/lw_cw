"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class user_commands_t(object):
    __slots__ = ["mode", "timestamp", "user_inputs", "desired_state", "desired_outputs"]

    __typenames__ = ["int16_t", "int64_t", "double", "double", "double"]

    __dimensions__ = [None, None, [3], [2], [1]]

    def __init__(self):
        self.mode = 0
        self.timestamp = 0
        self.user_inputs = [ 0.0 for dim0 in range(3) ]
        self.desired_state = [ 0.0 for dim0 in range(2) ]
        self.desired_outputs = [ 0.0 for dim0 in range(1) ]

    def encode(self):
        buf = BytesIO()
        buf.write(user_commands_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">hq", self.mode, self.timestamp))
        buf.write(struct.pack('>3d', *self.user_inputs[:3]))
        buf.write(struct.pack('>2d', *self.desired_state[:2]))
        buf.write(struct.pack('>1d', *self.desired_outputs[:1]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != user_commands_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return user_commands_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = user_commands_t()
        self.mode, self.timestamp = struct.unpack(">hq", buf.read(10))
        self.user_inputs = struct.unpack('>3d', buf.read(24))
        self.desired_state = struct.unpack('>2d', buf.read(16))
        self.desired_outputs = struct.unpack('>1d', buf.read(8))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if user_commands_t in parents: return 0
        tmphash = (0x2d84d070bd606aae) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if user_commands_t._packed_fingerprint is None:
            user_commands_t._packed_fingerprint = struct.pack(">Q", user_commands_t._get_hash_recursive([]))
        return user_commands_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", user_commands_t._get_packed_fingerprint())[0]

